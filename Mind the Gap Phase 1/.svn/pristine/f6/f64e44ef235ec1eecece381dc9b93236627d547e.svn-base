package ca.ubc.cs.cpsc210.mindthegap.parsers;

import ca.ubc.cs.cpsc210.mindthegap.model.Arrival;
import ca.ubc.cs.cpsc210.mindthegap.model.Line;
import ca.ubc.cs.cpsc210.mindthegap.model.Station;
import ca.ubc.cs.cpsc210.mindthegap.parsers.exception.TfLArrivalsDataMissingException;

import javax.json.*;
import java.io.StringReader;
import java.util.Set;

/**
 * A parser for the data returned by the TfL station arrivals query
 */
public class TfLArrivalsParser extends TfLAbstractParser {

    /**
     * Parse arrivals from JSON response produced by TfL query.  Parsed arrivals are
     * added to given station assuming that arrival is on a line that passes
     * through the station and that corresponding JSON object has all of:
     * timeToStation, platformName, lineID and one of destinationName or towards.  If
     * any of the aforementioned elements is missing, or if arrival is on a line
     * that does not pass through the station, the arrival is not added to the station.
     *
     * @param stn             station to which parsed arrivals are to be added
     * @param jsonResponse    the JSON response produced by TfL
     * @throws JsonException  when JSON response does not have expected format
     * @throws TfLArrivalsDataMissingException  when all arrivals are missing at least one of the following:
     *      <ul>
     *          <li>timeToStation</li>
     *          <li>platformName</li>
     *          <li>lineId</li>
     *          <li>destinationName and towards</li>
     *      </ul>
     *  or if all arrivals are on a line that does not run through given station.
     */
    public static void parseArrivals(Station stn, String jsonResponse)
            throws JsonException, TfLArrivalsDataMissingException {

        JsonReader reader = Json.createReader(new StringReader(jsonResponse));

        JsonArray arrivals = reader.readArray();

        // NOTE: you must complete the rest of the implementation of this method
    }
}
